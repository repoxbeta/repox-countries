name: Publish Package to npmjs

on:
  release:
    types: [created]

env:
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_OWNER: ${{ github.repository_owner }}

jobs:
  validate-release-version:
    runs-on: ubuntu-latest
    steps:
      # Validate input release version
      - name: Check input release version
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ -z "${{ github.event.inputs.release_version }}" ]; then
            echo "Missing input 'release_version'."
            exit 1
          fi
      - name: Validate release version
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [[ ! ${{ github.event.inputs.release_version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid release version format. Please use MAJOR.MINOR.PATCH format (e.g., 1.0.0)"
            exit 1
          fi

  release-info-extraction:
    needs: validate-release-version
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.release_info.outputs.release_version }}
      release_exists: ${{ steps.release_info.outputs.release_exists }}
      release_notes: ${{ steps.release_info.outputs.release_notes }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release info
        uses: actions/github-script@v7
        id: release_info
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Function to check if release version exists
            async function checkReleaseVersion(version) {
              const owner = process.env.GITHUB_REPOSITORY_OWNER;
              const repository = process.env.GITHUB_REPOSITORY;
              const repositoryName = repository.lastIndexOf('/') > -1 ? repository.split('/')[1] : repository;
              const result = { exists: false, releaseNotes: undefined };

              try {
                const { status, data } = await github.rest.repos.getReleaseByTag({
                  owner: owner,
                  repo: repositoryName,
                  tag: version,
                });

                if (status === 404) {
                  console.log(`Release version [${version}] does not exist.`);
                  result.exists = false;
                } else {
                  console.log(`Release version [${version}] exists.`);
                  result.exists = true;
                  result.releaseNotes = data.body;
                }
              } catch (error) {
                console.log(error.message);
              }
              return result;
            };

            const releaseVersion = "${{ github.event.inputs.release_version }}" || "${{ github.event.release.tag_name }}";
            const releaseVersionExists = await checkReleaseVersion(releaseVersion);
            if (!releaseVersionExists.exists) {
              core.setFailed(`Release version [${releaseVersion}] does not exist.`);
            }

            // Output release version info
            core.setOutput('release_version', releaseVersion);
            core.setOutput('release_exists', releaseVersionExists.exists);
            core.setOutput('release_notes', releaseVersionExists.releaseNotes);

  publish:
    needs: release-info-extraction
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [21.x]
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: 'refs/tags/${{ needs.release-info-extraction.outputs.release_version }}'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'
          scope: '@${{ env.GITHUB_OWNER }}'

      - name: Install dependencies
        run: CI=true yarn install

      - name: Build package
        run: yarn build

      - name: Publish to npm registry
        run: yarn publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
